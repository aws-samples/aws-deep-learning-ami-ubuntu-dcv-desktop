#!/usr/bin/env python3

import copy
import os
import signal
import subprocess
import sys
import re

from jinja2 import Template

def get_conf(num_servers):

    template = Template("""
    worker_processes 1;

    events {
        worker_connections   2000;
    }

    http {
        upstream backend {
            {%- for server in servers %}
            server localhost:{{ server.port }};
            {%- endfor %}
        }

        server {
            listen 8080;

            location / {
                proxy_pass http://backend;
                proxy_connect_timeout 60s; 
                proxy_read_timeout 120s;
                proxy_send_timeout 120s;
            }
        }
                        
        client_max_body_size 200M;
    }
    """)

    servers = [ { "port": (8000+x*8)} for x in range(num_servers) ]
    data = { "servers": servers}

    nginx_conf = template.render(data)
    server_ports = [ {"http": (8000+8*x), "grpc": (8001+8*x), "metrics": (8002+8*x)} for x in range(num_servers)]

    return nginx_conf, server_ports

def get_core_groups():
    """Lists files in a directory that start with a given prefix."""

    directory = "/dev"
    prefix = "nvidia"
    files = []
    for filename in os.listdir(directory):
        if re.search(f'^{prefix}\\d+', filename):
            files.append(filename)
    
    num_cores = len(files)
    model_server_cores = int(os.environ.get("TENSOR_PARALLEL_SIZE", num_cores))
     
    cores = [ x for x in range(num_cores)]
    core_groups = [cores[x:x+model_server_cores] for x in range(0, len(cores), model_server_cores)]
    core_groups = core_groups[: (num_cores// model_server_cores)]
    return core_groups

def sigterm_handler(*pids):
    for pid in pids:
        try:
            os.kill(pid, signal.SIGTERM)
        except OSError:
            pass

    sys.exit(0)

def build_trtllm_engine():
    build_script = os.getenv("BUILD_SCRIPT", None)
    if build_script:
        print(f"Invoking build script: {build_script}")
        subprocess.check_call([build_script])

def start_server():
    build_trtllm_engine()

    core_groups = get_core_groups()
    print(f"Inference server core groups; {core_groups}")
    num_servers = len(core_groups)

    nginx_conf, triton_server_ports = get_conf(num_servers=num_servers)
    print(f"nginx.conf: {nginx_conf}")
    print(f"triton server ports: {triton_server_ports}")

    with open("/opt/program/nginx.conf", "w+" ) as f:
        f.write(nginx_conf)

    # link the log streams to stdout/err so they will be logged to the container logs
    subprocess.check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    subprocess.check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])
    nginx = subprocess.Popen(['nginx', '-c', '/opt/program/nginx.conf'])
    
    model_repo = os.getenv("MODEL_REPO", "/opt/ml/model/model_repo" )
    pids = [nginx.pid]
    
    for i, ports in enumerate(triton_server_ports):
        env_copy = copy.deepcopy(os.environ)
        group = core_groups[i]
        env_copy['CUDA_VISIBLE_DEVICES']=",".join(str(x) for x in group)
        http = ports['http']
        grpc = ports['grpc']
        metrics = ports['metrics']
        print(f"server instance: {i}: http: {http}, grpc: {grpc}, metric: {metrics}")
        print(f"server instance: {i}: CUDA_VISIBLE_DEVICES={env_copy['CUDA_VISIBLE_DEVICES']}")
        model_name = os.getenv("MODEL_NAME", None)
        assert model_name, f"MODEL_NAME environment variable not defined"
        world_size = len(core_groups[i])
        server = subprocess.Popen(['python3', 
                                   "scripts/launch_triton_server.py",
                                   f"--model_repo={model_repo}",
                                   f"--tensorrt_llm_model_name={model_name}",
                                   f"--world_size={world_size}",
                                   f"--grpc_port={grpc}",
                                   f"--http_port={http}",
                                   f"--metrics_port={metrics}"],
                                   cwd="/opt/tensorrtllm_backend", 
                                   env=env_copy)
        pids.append(server.pid)

    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(*pids))

    # Exit the inference server upon exit of either subprocess
    pids = set(pids)
    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    sigterm_handler(nginx.pid)
    print('Inference server exiting')

# The main routine to invoke the start function.

if __name__ == '__main__':
    start_server()